
GPIO_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b0c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb4  08000cb4  00020428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00020428  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb4  08000cb4  00020428  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb4  08000cb4  00020428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  08000cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000428  080010e4  00020428  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080010e4  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002933  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000819  00000000  00000000  00022d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000235a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000024d1  00000000  00000000  00023730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000219e  00000000  00000000  00025c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009ba1  00000000  00000000  00027d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00031940  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000128  00000000  00000000  00031998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004bc  00000000  00000000  00031ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000428 	.word	0x20000428
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c9c 	.word	0x08000c9c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000042c 	.word	0x2000042c
 80001e4:	08000c9c 	.word	0x08000c9c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:

	}


void GPIO_PeriClockControl(GPIO_Periph *pGPIOx, uint8_t EnorDi)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d173      	bne.n	80002f2 <GPIO_PeriClockControl+0xfa>
	{
		if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a3c      	ldr	r2, [pc, #240]	; (8000300 <GPIO_PeriClockControl+0x108>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d108      	bne.n	8000224 <GPIO_PeriClockControl+0x2c>
		{
			GPIOA_PCLK_EN();
 8000212:	4b3c      	ldr	r3, [pc, #240]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000218:	4b3a      	ldr	r3, [pc, #232]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f042 0201 	orr.w	r2, r2, #1
 8000220:	631a      	str	r2, [r3, #48]	; 0x30
		{
			GPIOH_PCLK_EN();
		}

	}
	}
 8000222:	e066      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOB)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a38      	ldr	r2, [pc, #224]	; (8000308 <GPIO_PeriClockControl+0x110>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d108      	bne.n	800023e <GPIO_PeriClockControl+0x46>
			GPIOB_PCLK_EN();
 800022c:	4b35      	ldr	r3, [pc, #212]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000232:	4b34      	ldr	r3, [pc, #208]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f042 0202 	orr.w	r2, r2, #2
 800023a:	631a      	str	r2, [r3, #48]	; 0x30
	}
 800023c:	e059      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOC)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a32      	ldr	r2, [pc, #200]	; (800030c <GPIO_PeriClockControl+0x114>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d108      	bne.n	8000258 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLK_EN();
 8000246:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f042 0204 	orr.w	r2, r2, #4
 8000254:	631a      	str	r2, [r3, #48]	; 0x30
	}
 8000256:	e04c      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a2d      	ldr	r2, [pc, #180]	; (8000310 <GPIO_PeriClockControl+0x118>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d108      	bne.n	8000272 <GPIO_PeriClockControl+0x7a>
			GPIOD_PCLK_EN();
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f042 0208 	orr.w	r2, r2, #8
 800026e:	631a      	str	r2, [r3, #48]	; 0x30
	}
 8000270:	e03f      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOE)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a27      	ldr	r2, [pc, #156]	; (8000314 <GPIO_PeriClockControl+0x11c>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d108      	bne.n	800028c <GPIO_PeriClockControl+0x94>
			GPIOE_PCLK_EN();
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f042 0210 	orr.w	r2, r2, #16
 8000288:	631a      	str	r2, [r3, #48]	; 0x30
	}
 800028a:	e032      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOF)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <GPIO_PeriClockControl+0x120>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d108      	bne.n	80002a6 <GPIO_PeriClockControl+0xae>
			GPIOF_PCLK_EN();
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f042 0220 	orr.w	r2, r2, #32
 80002a2:	631a      	str	r2, [r3, #48]	; 0x30
	}
 80002a4:	e025      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOG)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <GPIO_PeriClockControl+0x124>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d108      	bne.n	80002c0 <GPIO_PeriClockControl+0xc8>
			GPIOG_PCLK_EN();
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002bc:	631a      	str	r2, [r3, #48]	; 0x30
	}
 80002be:	e018      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOH)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a17      	ldr	r2, [pc, #92]	; (8000320 <GPIO_PeriClockControl+0x128>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d108      	bne.n	80002da <GPIO_PeriClockControl+0xe2>
			GPIOH_PCLK_EN();
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002d6:	631a      	str	r2, [r3, #48]	; 0x30
	}
 80002d8:	e00b      	b.n	80002f2 <GPIO_PeriClockControl+0xfa>
		else if(pGPIOx == GPIOI)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <GPIO_PeriClockControl+0x12c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d107      	bne.n	80002f2 <GPIO_PeriClockControl+0xfa>
			GPIOH_PCLK_EN();
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <GPIO_PeriClockControl+0x10c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002f0:	631a      	str	r2, [r3, #48]	; 0x30
	}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40020000 	.word	0x40020000
 8000304:	20000000 	.word	0x20000000
 8000308:	40020400 	.word	0x40020400
 800030c:	40020800 	.word	0x40020800
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40021000 	.word	0x40021000
 8000318:	40021400 	.word	0x40021400
 800031c:	40021800 	.word	0x40021800
 8000320:	40021c00 	.word	0x40021c00
 8000324:	40022000 	.word	0x40022000

08000328 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

	//enable clock for GPIOx
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx , ENABLE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff5c 	bl	80001f8 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	2b03      	cmp	r3, #3
 8000346:	d821      	bhi.n	800038c <GPIO_Init+0x64>
	{
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	461a      	mov	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);//Clearing
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	4619      	mov	r1, r3
 8000366:	2303      	movs	r3, #3
 8000368:	408b      	lsls	r3, r1
 800036a:	43db      	mvns	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	400a      	ands	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6819      	ldr	r1, [r3, #0]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	430a      	orrs	r2, r1
 8000384:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
 800038a:	e0c4      	b.n	8000516 <GPIO_Init+0x1ee>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	2b04      	cmp	r3, #4
 8000392:	d117      	bne.n	80003c4 <GPIO_Init+0x9c>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 8000394:	4b47      	ldr	r3, [pc, #284]	; (80004b4 <GPIO_Init+0x18c>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	7912      	ldrb	r2, [r2, #4]
 800039c:	4611      	mov	r1, r2
 800039e:	2201      	movs	r2, #1
 80003a0:	408a      	lsls	r2, r1
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a43      	ldr	r2, [pc, #268]	; (80004b4 <GPIO_Init+0x18c>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 80003aa:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <GPIO_Init+0x18c>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7912      	ldrb	r2, [r2, #4]
 80003b2:	4611      	mov	r1, r2
 80003b4:	2201      	movs	r2, #1
 80003b6:	408a      	lsls	r2, r1
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a3d      	ldr	r2, [pc, #244]	; (80004b4 <GPIO_Init+0x18c>)
 80003be:	400b      	ands	r3, r1
 80003c0:	6093      	str	r3, [r2, #8]
 80003c2:	e035      	b.n	8000430 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	2b05      	cmp	r3, #5
 80003ca:	d117      	bne.n	80003fc <GPIO_Init+0xd4>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 80003cc:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <GPIO_Init+0x18c>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7912      	ldrb	r2, [r2, #4]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	4611      	mov	r1, r2
 80003dc:	4a35      	ldr	r2, [pc, #212]	; (80004b4 <GPIO_Init+0x18c>)
 80003de:	430b      	orrs	r3, r1
 80003e0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 80003e2:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <GPIO_Init+0x18c>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <GPIO_Init+0x18c>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
 80003fa:	e019      	b.n	8000430 <GPIO_Init+0x108>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	2b06      	cmp	r3, #6
 8000402:	d115      	bne.n	8000430 <GPIO_Init+0x108>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <GPIO_Init+0x18c>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	7912      	ldrb	r2, [r2, #4]
 800040c:	4611      	mov	r1, r2
 800040e:	2201      	movs	r2, #1
 8000410:	408a      	lsls	r2, r1
 8000412:	4611      	mov	r1, r2
 8000414:	4a27      	ldr	r2, [pc, #156]	; (80004b4 <GPIO_Init+0x18c>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6093      	str	r3, [r2, #8]
			//Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <GPIO_Init+0x18c>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	4611      	mov	r1, r2
 800042a:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <GPIO_Init+0x18c>)
 800042c:	430b      	orrs	r3, r1
 800042e:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 4 ;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	089b      	lsrs	r3, r3, #2
 8000436:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 4;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	f003 0303 	and.w	r3, r3, #3
 8000440:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <GPIO_Init+0x190>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d045      	beq.n	80004d8 <GPIO_Init+0x1b0>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <GPIO_Init+0x194>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d02b      	beq.n	80004ae <GPIO_Init+0x186>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <GPIO_Init+0x198>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d024      	beq.n	80004aa <GPIO_Init+0x182>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <GPIO_Init+0x19c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d01d      	beq.n	80004a6 <GPIO_Init+0x17e>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <GPIO_Init+0x1a0>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d016      	beq.n	80004a2 <GPIO_Init+0x17a>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <GPIO_Init+0x1a4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d00f      	beq.n	800049e <GPIO_Init+0x176>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <GPIO_Init+0x1a8>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d008      	beq.n	800049a <GPIO_Init+0x172>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <GPIO_Init+0x1ac>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d101      	bne.n	8000496 <GPIO_Init+0x16e>
 8000492:	2307      	movs	r3, #7
 8000494:	e021      	b.n	80004da <GPIO_Init+0x1b2>
 8000496:	2300      	movs	r3, #0
 8000498:	e01f      	b.n	80004da <GPIO_Init+0x1b2>
 800049a:	2306      	movs	r3, #6
 800049c:	e01d      	b.n	80004da <GPIO_Init+0x1b2>
 800049e:	2305      	movs	r3, #5
 80004a0:	e01b      	b.n	80004da <GPIO_Init+0x1b2>
 80004a2:	2304      	movs	r3, #4
 80004a4:	e019      	b.n	80004da <GPIO_Init+0x1b2>
 80004a6:	2303      	movs	r3, #3
 80004a8:	e017      	b.n	80004da <GPIO_Init+0x1b2>
 80004aa:	2302      	movs	r3, #2
 80004ac:	e015      	b.n	80004da <GPIO_Init+0x1b2>
 80004ae:	2301      	movs	r3, #1
 80004b0:	e013      	b.n	80004da <GPIO_Init+0x1b2>
 80004b2:	bf00      	nop
 80004b4:	40013c00 	.word	0x40013c00
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40020400 	.word	0x40020400
 80004c0:	40020800 	.word	0x40020800
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40021400 	.word	0x40021400
 80004d0:	40021800 	.word	0x40021800
 80004d4:	40021c00 	.word	0x40021c00
 80004d8:	2300      	movs	r3, #0
 80004da:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004dc:	4b5f      	ldr	r3, [pc, #380]	; (800065c <GPIO_Init+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004e2:	4b5e      	ldr	r3, [pc, #376]	; (800065c <GPIO_Init+0x334>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004ea:	645a      	str	r2, [r3, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4 );
 80004ec:	7c7a      	ldrb	r2, [r7, #17]
 80004ee:	7cbb      	ldrb	r3, [r7, #18]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	fa02 f103 	lsl.w	r1, r2, r3
 80004f6:	4a5a      	ldr	r2, [pc, #360]	; (8000660 <GPIO_Init+0x338>)
 80004f8:	7cfb      	ldrb	r3, [r7, #19]
 80004fa:	3302      	adds	r3, #2
 80004fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin;
 8000500:	4b58      	ldr	r3, [pc, #352]	; (8000664 <GPIO_Init+0x33c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	4611      	mov	r1, r2
 8000510:	4a54      	ldr	r2, [pc, #336]	; (8000664 <GPIO_Init+0x33c>)
 8000512:	430b      	orrs	r3, r1
 8000514:	6013      	str	r3, [r2, #0]
	}

	//Configure the speed
	temp =( pGPIOHandle->GPIO_PinConfig.GPIO_Pinspeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	799b      	ldrb	r3, [r3, #6]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0X03 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);//clearing
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	4619      	mov	r1, r3
 8000534:	2303      	movs	r3, #3
 8000536:	408b      	lsls	r3, r1
 8000538:	43db      	mvns	r3, r3
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	400a      	ands	r2, r1
 8000542:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6899      	ldr	r1, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	430a      	orrs	r2, r1
 8000552:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]

	//Configure the pupd setiings
	temp =( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	79db      	ldrb	r3, [r3, #7]
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin));//clearing
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68d9      	ldr	r1, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	430a      	orrs	r2, r1
 8000596:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]

	//configure the optype
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d11f      	bne.n	80005e4 <GPIO_Init+0x2bc>
	{
		temp= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7a1b      	ldrb	r3, [r3, #8]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin );
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	2301      	movs	r3, #1
 80005c2:	408b      	lsls	r3, r1
 80005c4:	43db      	mvns	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	400a      	ands	r2, r1
 80005ce:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6859      	ldr	r1, [r3, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	430a      	orrs	r2, r1
 80005de:	605a      	str	r2, [r3, #4]
		temp = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
	}

	//Configure the alt function registers
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d132      	bne.n	8000652 <GPIO_Init+0x32a>
	{
		uint32_t temp1, temp2;

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 8);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	60fb      	str	r3, [r7, #12]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 8);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x03 << (4 * temp2) );//clearing
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	2103      	movs	r1, #3
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4011      	ands	r1, r2
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	3208      	adds	r2, #8
 8000624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	3208      	adds	r2, #8
 8000630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7a5b      	ldrb	r3, [r3, #9]
 8000638:	4619      	mov	r1, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4311      	orrs	r1, r2
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	3208      	adds	r2, #8
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}

}
 8000652:	bf00      	nop
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	40013800 	.word	0x40013800
 8000664:	40013c00 	.word	0x40013c00

08000668 <RCC_GetPCLK1Value>:

uint32_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512} ;
uint8_t APB1_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk, clksrc, temp, ahbp ;

	uint8_t apb1p;

	clksrc = ( RCC->CFGR >> 2 ) & 0x03;
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <RCC_GetPCLK1Value+0x9c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	60bb      	str	r3, [r7, #8]

	if( clksrc == 0 )
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <RCC_GetPCLK1Value+0xa0>)
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	e00b      	b.n	80006a0 <RCC_GetPCLK1Value+0x38>
	}
	else if( clksrc == 1 )
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d102      	bne.n	8000694 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <RCC_GetPCLK1Value+0xa4>)
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e005      	b.n	80006a0 <RCC_GetPCLK1Value+0x38>
	}
	else if( clksrc == 2 )
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d102      	bne.n	80006a0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800069a:	f000 f891 	bl	80007c0 <RCC_GetPLLOutputClock>
 800069e:	6178      	str	r0, [r7, #20]
	}


	//AHB prescaler
	temp = (( RCC->CFGR >> 4 ) & 0xF) ;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <RCC_GetPCLK1Value+0x9c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	091b      	lsrs	r3, r3, #4
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	607b      	str	r3, [r7, #4]

	if(temp < 8)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	d802      	bhi.n	80006ba <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	e005      	b.n	80006c6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3b08      	subs	r3, #8
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <RCC_GetPCLK1Value+0xa8>)
 80006c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c4:	613b      	str	r3, [r7, #16]
	}

	//APB1 prescaler
	temp = ((RCC->CFGR >> 10 ) & 0x7 );
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <RCC_GetPCLK1Value+0x9c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	0a9b      	lsrs	r3, r3, #10
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	607b      	str	r3, [r7, #4]

	if(temp < 4)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d802      	bhi.n	80006e0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e004      	b.n	80006ea <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b04      	subs	r3, #4
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <RCC_GetPCLK1Value+0xac>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	73fb      	strb	r3, [r7, #15]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80006ea:	697a      	ldr	r2, [r7, #20]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f8:	603b      	str	r3, [r7, #0]

	return pclk1;
 80006fa:	683b      	ldr	r3, [r7, #0]

}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	00f42400 	.word	0x00f42400
 800070c:	007a1200 	.word	0x007a1200
 8000710:	20000004 	.word	0x20000004
 8000714:	20000024 	.word	0x20000024

08000718 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <RCC_GetPCLK2Value+0x94>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f003 0303 	and.w	r3, r3, #3
 8000730:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000732:	7a7b      	ldrb	r3, [r7, #9]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <RCC_GetPCLK2Value+0x26>
	{
		SystemClock = 16000000;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <RCC_GetPCLK2Value+0x98>)
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e001      	b.n	8000742 <RCC_GetPCLK2Value+0x2a>
	}else
	{
		SystemClock = 8000000;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <RCC_GetPCLK2Value+0x9c>)
 8000740:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <RCC_GetPCLK2Value+0x94>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d802      	bhi.n	800075c <RCC_GetPCLK2Value+0x44>
	{
		ahbp = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	72fb      	strb	r3, [r7, #11]
 800075a:	e005      	b.n	8000768 <RCC_GetPCLK2Value+0x50>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b08      	subs	r3, #8
 8000760:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <RCC_GetPCLK2Value+0xa0>)
 8000762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000766:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <RCC_GetPCLK2Value+0x94>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	0b5b      	lsrs	r3, r3, #13
 8000770:	f003 0307 	and.w	r3, r3, #7
 8000774:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d802      	bhi.n	8000782 <RCC_GetPCLK2Value+0x6a>
	{
		apb2p = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	72bb      	strb	r3, [r7, #10]
 8000780:	e004      	b.n	800078c <RCC_GetPCLK2Value+0x74>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3b04      	subs	r3, #4
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <RCC_GetPCLK2Value+0xa4>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	fbb2 f2f3 	udiv	r2, r2, r3
 8000794:	7abb      	ldrb	r3, [r7, #10]
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	603b      	str	r3, [r7, #0]

	return pclk2;
 800079c:	683b      	ldr	r3, [r7, #0]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000000 	.word	0x20000000
 80007b0:	00f42400 	.word	0x00f42400
 80007b4:	007a1200 	.word	0x007a1200
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000024 	.word	0x20000024

080007c0 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

	return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <USART_SetBaudRate>:

/************************************************/
/**************USART set baud rate***************/
/************************************************/
void USART_SetBaudRate(USART_Periph *pUSARTx, uint32_t BaudRate)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	uint32_t USARTdiv;

	//Variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]

	//get the value of APB bus aclock into the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a31      	ldr	r2, [pc, #196]	; (80008a8 <USART_SetBaudRate+0xd8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d003      	beq.n	80007ee <USART_SetBaudRate+0x1e>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a30      	ldr	r2, [pc, #192]	; (80008ac <USART_SetBaudRate+0xdc>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d103      	bne.n	80007f6 <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 80007ee:	f7ff ff93 	bl	8000718 <RCC_GetPCLK2Value>
 80007f2:	61f8      	str	r0, [r7, #28]
 80007f4:	e002      	b.n	80007fc <USART_SetBaudRate+0x2c>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 80007f6:	f7ff ff37 	bl	8000668 <RCC_GetPCLK1Value>
 80007fa:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuartion bit
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8 ))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00b      	beq.n	8000820 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1, over sampling by 8
		USARTdiv = (( 25 * PCLKx ) / ( 2 * BaudRate ));
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	009a      	lsls	r2, r3, #2
 8000812:	441a      	add	r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fbb2 f3f3 	udiv	r3, r2, r3
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	e00a      	b.n	8000836 <USART_SetBaudRate+0x66>
	}else
	{
		//OVER8 = 0, over sampling by 16
		USARTdiv = (( 25 * PCLKx ) / ( 4 * BaudRate ));
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009a      	lsls	r2, r3, #2
 800082a:	441a      	add	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = USARTdiv / 100;
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <USART_SetBaudRate+0xe0>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appopriate bit position, refer USART_BRR
	tempreg |= M_part << 4;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (USARTdiv - (M_part * 100));
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2264      	movs	r2, #100	; 0x64
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8 ))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1, over sampling by 8
		F_part = ((( F_part * 8 ) + 50) / 100) & ((uint8_t)0x07);
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	3332      	adds	r3, #50	; 0x32
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <USART_SetBaudRate+0xe0>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <USART_SetBaudRate+0xc0>
	}else
	{
		//OVER8 = 0, Oversampling by 16
		F_part = ((( F_part * 16 ) + 50) / 100) & ((uint8_t)0x0F);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	3332      	adds	r3, #50	; 0x32
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <USART_SetBaudRate+0xe0>)
 8000884:	fba2 2303 	umull	r2, r3, r2, r3
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position, refer USART_BRR
	tempreg |= F_part;
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg into BRR register;
	pUSARTx->BRR = tempreg;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	609a      	str	r2, [r3, #8]
}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40011000 	.word	0x40011000
 80008ac:	40011400 	.word	0x40011400
 80008b0:	51eb851f 	.word	0x51eb851f

080008b4 <USART_PeripheralControl>:


/*****************USART Pripheral Control*******************/
void USART_PeripheralControl(USART_Periph *pUSARTx, uint8_t Cmd)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d106      	bne.n	80008d4 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 80008d2:	e005      	b.n	80008e0 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	60da      	str	r2, [r3, #12]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <USART_PeriClockControl>:


/***************USART Peripheral Clock Control********************/
void USART_PeriClockControl(USART_Periph *pUSARTx, uint8_t EnorDi)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d132      	bne.n	8000964 <USART_PeriClockControl+0x78>
	{
		if(pUSARTx == USART1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <USART_PeriClockControl+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d108      	bne.n	8000918 <USART_PeriClockControl+0x2c>
		{
			USART1_PCLK_EN();
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <USART_PeriClockControl+0x88>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <USART_PeriClockControl+0x88>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0210 	orr.w	r2, r2, #16
 8000914:	645a      	str	r2, [r3, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000916:	e025      	b.n	8000964 <USART_PeriClockControl+0x78>
		}else if (pUSARTx == USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <USART_PeriClockControl+0x8c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d108      	bne.n	8000932 <USART_PeriClockControl+0x46>
			USART2_PCLK_EN();
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <USART_PeriClockControl+0x88>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <USART_PeriClockControl+0x88>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800092e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000930:	e018      	b.n	8000964 <USART_PeriClockControl+0x78>
		}else if (pUSARTx == USART3)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a11      	ldr	r2, [pc, #68]	; (800097c <USART_PeriClockControl+0x90>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d108      	bne.n	800094c <USART_PeriClockControl+0x60>
			USART3_PCLK_EN();
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <USART_PeriClockControl+0x88>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <USART_PeriClockControl+0x88>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
}
 800094a:	e00b      	b.n	8000964 <USART_PeriClockControl+0x78>
		else if (pUSARTx == UART4)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <USART_PeriClockControl+0x94>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d107      	bne.n	8000964 <USART_PeriClockControl+0x78>
			UART4_PCLK_EN();
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <USART_PeriClockControl+0x88>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <USART_PeriClockControl+0x88>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	40011000 	.word	0x40011000
 8000974:	20000000 	.word	0x20000000
 8000978:	40004400 	.word	0x40004400
 800097c:	40004800 	.word	0x40004800
 8000980:	40004c00 	.word	0x40004c00

08000984 <USART_Init>:

//USART Initialization
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]

	//Configuration of CR1

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ffa8 	bl	80008ec <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX )
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d104      	bne.n	80009ae <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= ( 1 << USART_CR1_RE );
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e010      	b.n	80009d0 <USART_Init+0x4c>
	}else if( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX )
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e007      	b.n	80009d0 <USART_Init+0x4c>
	}else if( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d103      	bne.n	80009d0 <USART_Init+0x4c>
	{
		//Implement the code to enable both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE  ) | ( 1 << USART_CR1_TE ) );
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 030c 	orr.w	r3, r3, #12
 80009ce:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word Length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7b5b      	ldrb	r3, [r3, #13]
 80009d4:	031b      	lsls	r3, r3, #12
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields
	if( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN )
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7b9b      	ldrb	r3, [r3, #14]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d104      	bne.n	80009f0 <USART_Init+0x6c>
	{
		//Implement the code to enale parity control
		tempreg |= ( 1 << USART_CR1_PCE );
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e00b      	b.n	8000a08 <USART_Init+0x84>

		//Implement the code to enable EVEn parity
		//Not required because by default EVEN parity will be selected once you enable the parity control
	}else if( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7b9b      	ldrb	r3, [r3, #14]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d107      	bne.n	8000a08 <USART_Init+0x84>
	{
		//Implement the code to enable parity control
		tempreg |= ( 1 << USART_CR1_PCE );
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USART_CR1_PS );
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a06:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	60da      	str	r2, [r3, #12]

	/***********************Configuration of CR2**********************/
	tempreg = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted using USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << 12;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7b1b      	ldrb	r3, [r3, #12]
 8000a18:	031b      	lsls	r3, r3, #12
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	611a      	str	r2, [r3, #16]


	/***********************Configuration of CR2**********************/
	tempreg = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]


	//Configuration of USART hardware flow Control
	if( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS )
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7bdb      	ldrb	r3, [r3, #15]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d104      	bne.n	8000a40 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS Flow Control
		tempreg |= ( 1 << USART_CR3_CTSE );
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e010      	b.n	8000a62 <USART_Init+0xde>
	}else if( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7bdb      	ldrb	r3, [r3, #15]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d104      	bne.n	8000a52 <USART_Init+0xce>
	{
		//Implement the code to enable RTS Flow Control
		tempreg |= ( 1 << USART_CR3_RTSE );
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e007      	b.n	8000a62 <USART_Init+0xde>
	}else if( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS )
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7bdb      	ldrb	r3, [r3, #15]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d103      	bne.n	8000a62 <USART_Init+0xde>
	{
		//Implement the code to enable both CTS and RTS Flow Control
		tempreg |= ( ( 1 << USART_CR3_CTSE ) | ( 1 << USART_CR3_RTSE ) );
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a60:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 =tempreg;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	615a      	str	r2, [r3, #20]

	/********************Configuration of BRR(Baudrate Register)***************/
	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4610      	mov	r0, r2
 8000a76:	f7ff feab 	bl	80007d0 <USART_SetBaudRate>


}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <USART_GetFlagStatus>:



/************USART Get Flag Satus****************/
uint8_t USART_GetFlagStatus(USART_Periph *pUSARTx , uint32_t FlagName)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & ( 1 << FlagName ))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <USART_GetFlagStatus+0x20>
	{
		return SET;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <USART_GetFlagStatus+0x22>
	}
	return RESET;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <USART_SendData>:

/************************************************/
/**********USART send and receive data***********/
/************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	//Loop over until "Len" number of bytes are transferred
	for( uint32_t i = 0; i < Len; i++ )
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e031      	b.n	8000b26 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while (! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE) );
 8000ac2:	bf00      	nop
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2107      	movs	r1, #7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ffd9 	bl	8000a82 <USART_GetFlagStatus>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f6      	beq.n	8000ac4 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9bits or 8bits in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7b5b      	ldrb	r3, [r3, #13]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d118      	bne.n	8000b10 <USART_SendData+0x60>
		{
			//If 9BIT, LOAD the DR with 2 bytes masking the bits other than first 9 bits
			pdata = (uint16_t*)pTxBuffer;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = ( *pdata & (uint16_t)0x1FF );
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000af0:	605a      	str	r2, [r3, #4]

			//Check for USART_ParityControl
			if( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	7b9b      	ldrb	r3, [r3, #14]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d106      	bne.n	8000b08 <USART_SendData+0x58>
			{
				//No parity is used in this transfer.So, 9 bits of user data willbe sent
				//Implement the code to increment pTxbuffer twice
				pTxBuffer++;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	e00b      	b.n	8000b20 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer. So, 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	e007      	b.n	8000b20 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = *pTxBuffer ;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
	for( uint32_t i = 0; i < Len; i++ )
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3c9      	bcc.n	8000ac2 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000b2e:	bf00      	nop
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2106      	movs	r1, #6
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffa3 	bl	8000a82 <USART_GetFlagStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f6      	beq.n	8000b30 <USART_SendData+0x80>
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2;

void USART2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	usart2.pUSARTx = USART2;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <USART2_Init+0x34>)
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <USART2_Init+0x38>)
 8000b54:	601a      	str	r2, [r3, #0]
	usart2.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <USART2_Init+0x34>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	609a      	str	r2, [r3, #8]
	usart2.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <USART2_Init+0x34>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	73da      	strb	r2, [r3, #15]
	usart2.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <USART2_Init+0x34>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	711a      	strb	r2, [r3, #4]
	usart2.USART_Config.USART_NoOfStopBits = USART_WORDLEN_8BITS;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <USART2_Init+0x34>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	731a      	strb	r2, [r3, #12]
	usart2.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <USART2_Init+0x34>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2);
 8000b76:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART2_Init+0x34>)
 8000b78:	f7ff ff04 	bl	8000984 <USART_Init>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000444 	.word	0x20000444
 8000b84:	40004400 	.word	0x40004400

08000b88 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpio;

	usart_gpio.pGPIOx = GPIOA;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <USART2_GPIOInit+0x40>)
 8000b90:	607b      	str	r3, [r7, #4]
	usart_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b92:	2302      	movs	r3, #2
 8000b94:	727b      	strb	r3, [r7, #9]
	usart_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b96:	2300      	movs	r3, #0
 8000b98:	733b      	strb	r3, [r7, #12]
	usart_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	72fb      	strb	r3, [r7, #11]
	usart_gpio.GPIO_PinConfig.GPIO_Pinspeed = GPIO_SPEED_FAST;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	72bb      	strb	r3, [r7, #10]
	usart_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpio.GPIO_PinConfig.GPIO_Pin = GPIO_PIN_NO_2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpio);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fbbb 	bl	8000328 <GPIO_Init>

	//USART2 RX
	usart_gpio.GPIO_PinConfig.GPIO_Pin = GPIO_PIN_NO_3;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpio);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fbb5 	bl	8000328 <GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000

08000bcc <main>:

int main()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	USART2_GPIOInit();
 8000bd0:	f7ff ffda 	bl	8000b88 <USART2_GPIOInit>

	USART2_Init();
 8000bd4:	f7ff ffba 	bl	8000b4c <USART2_Init>

	USART_PeripheralControl( USART2, ENABLE );
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <main+0x28>)
 8000bdc:	f7ff fe6a 	bl	80008b4 <USART_PeripheralControl>

	USART_SendData( &usart2, (uint8_t*)msg, strlen(msg) );
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <main+0x2c>)
 8000be2:	f7ff fb01 	bl	80001e8 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4903      	ldr	r1, [pc, #12]	; (8000bf8 <main+0x2c>)
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <main+0x30>)
 8000bee:	f7ff ff5f 	bl	8000ab0 <USART_SendData>

	while(1);
 8000bf2:	e7fe      	b.n	8000bf2 <main+0x26>
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	20000444 	.word	0x20000444

08000c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f000 f811 	bl	8000c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff ffcb 	bl	8000bcc <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 8000c44:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 8000c48:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8000c4c:	20000468 	.word	0x20000468

08000c50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <__libc_init_array>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	4d0d      	ldr	r5, [pc, #52]	; (8000c8c <__libc_init_array+0x38>)
 8000c58:	4c0d      	ldr	r4, [pc, #52]	; (8000c90 <__libc_init_array+0x3c>)
 8000c5a:	1b64      	subs	r4, r4, r5
 8000c5c:	10a4      	asrs	r4, r4, #2
 8000c5e:	2600      	movs	r6, #0
 8000c60:	42a6      	cmp	r6, r4
 8000c62:	d109      	bne.n	8000c78 <__libc_init_array+0x24>
 8000c64:	4d0b      	ldr	r5, [pc, #44]	; (8000c94 <__libc_init_array+0x40>)
 8000c66:	4c0c      	ldr	r4, [pc, #48]	; (8000c98 <__libc_init_array+0x44>)
 8000c68:	f000 f818 	bl	8000c9c <_init>
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	2600      	movs	r6, #0
 8000c72:	42a6      	cmp	r6, r4
 8000c74:	d105      	bne.n	8000c82 <__libc_init_array+0x2e>
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7c:	4798      	blx	r3
 8000c7e:	3601      	adds	r6, #1
 8000c80:	e7ee      	b.n	8000c60 <__libc_init_array+0xc>
 8000c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c86:	4798      	blx	r3
 8000c88:	3601      	adds	r6, #1
 8000c8a:	e7f2      	b.n	8000c72 <__libc_init_array+0x1e>
 8000c8c:	08000cb4 	.word	0x08000cb4
 8000c90:	08000cb4 	.word	0x08000cb4
 8000c94:	08000cb4 	.word	0x08000cb4
 8000c98:	08000cb8 	.word	0x08000cb8

08000c9c <_init>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr

08000ca8 <_fini>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr
